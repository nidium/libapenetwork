#!/usr/bin/env python2.7
import os 

from konstructor import Deps
from konstructor import CommandLine
from konstructor import Build
from konstructor import Builder
from konstructor import Platform
from konstructor import Variables
from konstructor import Konstruct
from konstructor import Utils
from konstructor import Log
from konstructor import ROOT

Gyp = Builder.Gyp

DEPEDENCY_REPO = "http://deps.nidium.com"

Platform.setEnviron(
    "CC=clang",
    "CXX=clang++", 
    #"CXXFLAGS=-stdlib=libc++",
    #"LDFLAGS=-stdlib=libc++",
    "MACOSX_DEPLOYMENT_TARGET=10.7"
)
Gyp.setExec("third-party/gyp/gyp")

@Deps.register("gyp")
def gyp():
    return {
        "location": Deps.SvnRepo("http://gyp.googlecode.com/svn/trunk/", revision=1967)
    }

@Deps.register("c-ares")
def cares():
    return {
        "location": DEPEDENCY_REPO + "/c-ares-1.9.1.tar.gz",
        "build": ["./configure", "make"],
        "outputs": [".libs/libcares.a"]
    }

@Deps.register("openssl")
def openssl():
    configure = "./config"
    if Platform.system == "Darwin":
        configure = "./Configure darwin64-x86_64-cc -no-shared"

    return {
        "location": DEPEDENCY_REPO + "/openssl-1.0.1g.tar.gz",
        "build": [configure, "make build_crypto", "make build_ssl"],
        "outputs": ["libssl(.a|.lib)", "libcrypto(.a|.lib)"]
    }

@Deps.register("gperftools")
def gperftools():
    return {
        "location": "https://googledrive.com/host/0B6NtGsLhIcf7MWxMMF9JdTN3UVk/gperftools-2.2.1.zip",
        "build": ["autoconf", "./configure", "make"],
        "outputs": [[".libs/libprofiler.so.0$", "libprofiler.so"], {"src": "src/pprof", "dest": "../../tools/pprof"}]
    }

#####

@CommandLine.option("--cpu-profiling", default=False)
def profiler(profiler):
    if profiler:
        Gyp.set("profiler", 1)
        Deps.set("gperftools")
        Platform.exportEnviron("CPUPROFILE=/tmp/profile.nidium")
        Platform.exportEnviron("LD_LIBRARY_PATH=" + ROOT + "/build/third-party/${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}")

@CommandLine.option("--debug", default=False)
def debug(debug):
    if debug:
        Variables.set("debug", True)
        Gyp.setConfiguration("Debug");
        Konstruct.setConfigs(["debug"])

@CommandLine.option("--third-party-path", default="")
def gypConfig(thirdPartyPath):
    if thirdPartyPath:
        Deps.setDir(thirdPartyPath)
        Variables.set("thirdPartyPath", os.path.abspath(thirdPartyPath))
        # Gyp needs a relative path
        Gyp.set("third_party", os.path.relpath(thirdPartyPath))
        Gyp.setExec(os.path.join(thirdPartyPath, "gyp", "gyp"))

@CommandLine.option("--asan", default=False)
def asan(asan):
    if asan:
        Gyp.set("asan", 1)

#####

Deps.set("gyp", "c-ares", "openssl")
Variables.set("depsRepo", DEPEDENCY_REPO)

@CommandLine.option("--mac-sdk-version", default="")
def macSdkVersion(version):
    if version:
        Gyp.set("mac_sdk_version", version)

def findAppleSDK(type='macosx'):
    import re
    type = type.lower()
    if type not in [ 'macosx', 'iphoneos', 'iphonesimulator']:
        Log.error("Invalid Apple SDK type %s" % type)
        exit()

    cmd = 'xcodebuild -showsdks'
    code, output = Utils.run(cmd, failExit=True, returnOutput=True)
    if code != 0 or output is None:
        return None

    output = output.split("\n")
    sdks = []
    for line in output:
        if type in line:
            v = re.search(type + "([0-9\.]+)", line)
            if v is not None:
                sdks.append(v.group(1))

    return sdks[len(sdks) - 1]

if Platform.system == "Darwin":
    sdk = findAppleSDK()
    if sdk is None:
       Utils.exit("No macos SDK detected. Make sure Xcode is correctly installed and configured")
    Gyp.set("mac_sdk_version", sdk)

# Temporary fix to make deps.py & Konstructor works 
Gyp.set("native_output", "../build/")
Gyp.set("native_output_third_party", "../build/third-party/")

if __name__ == '__main__':
    Gyp.setArgs("--depth ./ --include=gyp/config.gypi --include=gyp/common.gypi")
    Build.add(Gyp("gyp/network.gyp"));
    Konstruct.start() 
