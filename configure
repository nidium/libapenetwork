#!/usr/bin/env python2.7

# Copyright 2016 Nidium Inc. All rights reserved.
# Use of this source code is governed by a MIT license
# that can be found in the LICENSE file.

import os 

from konstructor import Deps
from konstructor import CommandLine
from konstructor import Build
from konstructor import Builder
from konstructor import Platform
from konstructor import Variables
from konstructor import Konstruct
from konstructor import Utils
from konstructor import Tests
from konstructor import Log
from konstructor import ROOT

Gyp = Builder.Gyp

DEPEDENCY_REPO = "http://deps.nidium.com"

Platform.setEnviron(
    "CC=clang",
    "CXX=clang++",
    "LDFLAGS=%s" % (os.environ.get("LDFLAGS", "")),
    "MACOSX_DEPLOYMENT_TARGET=10.7"
)

# We explicitely set "python2.7 gyp_main.py" because "gyp" executable force 
# the use of "python" which could be 2.7 or 3 and gyp does not work with python3
Gyp.setExec("python2.7 third-party/gyp/gyp_main.py")

@Deps.register("gyp")
def gyp():
    return {
        "location": Deps.SvnRepo("http://gyp.googlecode.com/svn/trunk/", revision=1967)
    }

@Deps.register("c-ares")
def cares():
    return {
        "location": DEPEDENCY_REPO + "/c-ares-1.9.1.tar.gz",
        "build": ["./configure", "make"],
        "outputs": [".libs/libcares.a"]
    }

@Deps.register("openssl")
def openssl():
    configure = "./config"
    if Platform.system == "Darwin":
        configure = "./Configure darwin64-x86_64-cc -no-shared"

    return {
        "location": DEPEDENCY_REPO + "/openssl-1.0.1g.tar.gz",
        "build": [configure, "make build_crypto", "make build_ssl"],
        "outputs": ["libssl(.a|.lib)", "libcrypto(.a|.lib)"]
    }

@Deps.register("zlib")
def zlip():
    return {
        "location": "http://zlib.net/zlib-1.2.8.tar.gz",
        "build": ["./configure --static", "make"],
        "outputs": ["libz.a"]
    }

@Deps.register("gperftools")
def gperftools():
    return {
        "location": "https://googledrive.com/host/0B6NtGsLhIcf7MWxMMF9JdTN3UVk/gperftools-2.2.1.zip",
        "build": ["autoconf", "chmod +x ./configure", "./configure", "make"],
        "outputs": [[".libs/libprofiler.so.0$", "libprofiler.so"], {"src": "src/pprof", "dest": "../../tools/pprof"}]
    }

@Deps.register("gtest")
def gtest():
    return {
        "location": Deps.GitRepo("https://github.com/google/googletest.git", tag="release-1.7.0"),
        "build": ["cmake .", "make"],
        "outputs": ["libgtest.a", "libgtest_main.a"]
    }

#####

@CommandLine.option("--cpu-profiling", default=False)
def profiler(profiler):
    if profiler:
        Gyp.set("profiler", 1)
        Deps.set("gperftools")

        @Konstruct.hook("postBuild")
        def profilerPostBuild(success):
            if not success:
                return

            Log.info("-------------------------------------")
            Log.info("You have enabled CPU profiling, you must set the following environement variables to enable CPU profiling when running your application : ")
            Log.info("CPUPROFILE=/tmp/profile.nidium")
            Log.info("LD_LIBRARY_PATH=" + ROOT + "/build/third-party/${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}")
            Log.info("-------------------------------------")

@CommandLine.option("--debug", default=False)
def debug(debug):
    if debug:
        Variables.set("debug", True)
        Gyp.setConfiguration("Debug");
        Konstruct.setConfigs(["debug"])

@CommandLine.option("--third-party-path", default="")
def gypConfig(thirdPartyPath):
    if thirdPartyPath:
        Deps.setDir(thirdPartyPath)
        Variables.set("thirdPartyPath", os.path.abspath(thirdPartyPath))
        # Gyp needs a relative path
        Gyp.set("third_party", os.path.relpath(thirdPartyPath))
        Gyp.setExec(os.path.join(thirdPartyPath, "gyp", "gyp"))

@CommandLine.option("--asan", default=False)
def asan(asan):
    if asan:
        Gyp.set("asan", 1)

@CommandLine.option("--module", default="")
def module(module):
    if not module:
        return

    Deps.set(Deps.Konstruct(module, module + "/configure"))

@CommandLine.option("--unit-tests", nargs="?", const="all", default=None)
@CommandLine.option("--auto-tests", nargs="?", const="all", default=None)
def testNetwork(unitTests, autoTests):
    if not unitTests and not autoTests:
        return

    head, tail = os.path.split(os.getcwd())
    cwd = os.path.dirname(os.path.realpath(__file__))

    #TODO: once the unit tests are more stable' activate this once more:
    #Builder.Gyp.set("asan", 1)

    if unitTests and ("network" in unitTests or "all" in unitTests):
        Gyp.set("unit_test", 1)
        Deps.set("gtest")

        Tests.register([
            "build/tests/nativenetwork-unittests"
        ], builders=[Gyp("%s/gyp/network-unittests.gyp" % cwd)])

    @Konstruct.hook("postBuild")
    def runNetworkTest(success):
        Tests.runTest(success)

@CommandLine.option("--assume-yes", default=False)
def assumeYes(assumeYes):
    Utils.promptAssumeYes(assumeYes)

#####

Deps.set("gyp", "c-ares", "openssl", "zlib")
Variables.set("depsRepo", DEPEDENCY_REPO)

@CommandLine.option("--mac-sdk-version", default="")
def macSdkVersion(version):
    if version:
        Gyp.set("mac_sdk_version", version)

def findAppleSDK(type='macosx'):
    import re
    type = type.lower()
    if type not in [ 'macosx', 'iphoneos', 'iphonesimulator']:
        Log.error("Invalid Apple SDK type %s" % type)
        exit()

    cmd = 'xcodebuild -showsdks'
    code, output = Utils.run(cmd, failExit=True, returnOutput=True)
    if code != 0 or output is None:
        return None

    output = output.split("\n")
    sdks = []
    for line in output:
        if type in line:
            v = re.search(type + "([0-9\.]+)", line)
            if v is not None:
                sdks.append(v.group(1))

    return sdks[len(sdks) - 1]

if Platform.system == "Darwin":
    sdk = findAppleSDK()
    if sdk is None:
       Utils.exit("No macos SDK detected. Make sure Xcode is correctly installed and configured")
    Gyp.set("mac_sdk_version", sdk)

# Temporary fix to make deps.py & Konstructor works
Gyp.set("native_output", "../build/")
Gyp.set("native_output_third_party", "../build/third-party/")

if __name__ == '__main__':
    Gyp.setArgs("--depth ./ --include=gyp/config.gypi --include=gyp/common.gypi")
    Build.add(Gyp("gyp/network.gyp"));
    Konstruct.start()

