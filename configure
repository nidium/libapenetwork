#!/usr/bin/python
import os, sys

sys.path.append("./tools/src")

from konstructor import Deps
from konstructor import CommandLine
from konstructor import Build
from konstructor import Builder
from konstructor import Platform
from konstructor import Variables
from konstructor import Konstruct
from konstructor import ROOT

Gyp = Builder.Gyp

DEPEDENCY_REPO = "http://deps.nidium.com"

Platform.setEnviron(
    "CC=clang",
    "CXX=clang++", 
    #"CXXFLAGS=-stdlib=libc++",
    #"LDFLAGS=-stdlib=libc++",
    "MACOSX_DEPLOYMENT_TARGET=10.7"
)
Gyp.setArgs("--depth ./ --include=gyp/config.gypi --include=gyp/common.gypi")
Gyp.setExec("third-party/gyp/gyp")

@Deps.register("gyp")
def gyp():
    return {
        "location": Deps.SvnRepo("http://gyp.googlecode.com/svn/trunk/", revision=1967),
        "patchs": ["gyp.patch"]
    }

@Deps.register("c-ares")
def cares():
    return {
        "location": DEPEDENCY_REPO + "/c-ares-1.9.1.tar.gz",
        "build": ["./configure", "make"],
        "outputs": [".libs/libcares.a"]
    }

@Deps.register("openssl")
def openssl():
    configure = "./config"
    if Platform.system == "Darwin":
        configure = "./Configure darwin64-x86_64-cc -no-shared"

    return {
        "location": DEPEDENCY_REPO + "/openssl-1.0.1g.tar.gz",
        "build": [configure, "make build_crypto", "make build_ssl"],
        "outputs": ["libssl(.a|.lib)", "libcrypto(.a|.lib)"]
    }

@Deps.register("gperftools")
def gperftools():
    return {
        "location": "https://googledrive.com/host/0B6NtGsLhIcf7MWxMMF9JdTN3UVk/gperftools-2.2.1.zip",
        "build": ["autoconf", "./configure", "make"],
        "outputs": [[".libs/libprofiler.so.0$", "libprofiler.so"], {"src": "src/pprof", "dest": "../../tools/pprof"}]
    }

#####

@CommandLine.option("--cpu-profiling", default=False)
def profiler(profiler_on):
    if profiler_on:
        Gyp.set("profiler", 1)
        Deps.set("gperftools")
        Platform.exportEnviron("CPUPROFILE=/tmp/profile.nidium")
        Platform.exportEnviron("LD_LIBRARY_PATH=" + ROOT + "/build/third-party/${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}")

@CommandLine.option("--debug", default=False)
def debug(debug_on):
    if debug_on:
        Variables.set("debug", True)
        Gyp.setConfiguration("Debug")
        Konstruct.setConfigs(["debug"])

@CommandLine.option("--third-party-path", default="")
def gypConfig(third_party_path):
    if third_party_path:
        Deps.setDir(third_party_path)
        Variables.set("third_party_path", third_party_path)
        Gyp.set("third_party", third_party_path)
        Gyp.setExec(os.path.join(third_party_path, "gyp", "gyp"))

@CommandLine.option("--asan", default=False)
def asan(asan_on):
    if asan_on:
        Gyp.set("asan", 1)

#####

Deps.set("gyp", "c-ares", "openssl")
Variables.set("depsRepo", DEPEDENCY_REPO)

# Temporary fix to make deps.py & Konstructor works 
Gyp.set("native_output", "../build/")
Gyp.set("native_output_third_party", "../build/third-party/")

if __name__ == '__main__':
    Build.add(Gyp("gyp/network.gyp"))
    Konstruct.start() 
